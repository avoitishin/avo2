-- axr_debug_tools UI script
-- Alundaio
--[[
Copyright (C) 2012 Alundaio
This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License-]]
--]]

------------------------------------------------------------
-- List box
------------------------------------------------------------
class "set_list_text" (CUIListBoxItem)
function set_list_text:__init(height) super(height)
--[[
	self.name					= self:GetTextItem()
	self.name:SetWndRect		(Frect():set(0,0,300,22))
	self:SetTextColor			(GetARGB(255, 210, 210, 210))
	self.name:SetFont			(GetFontLetterica18Russian())
	self.name:SetWndSize		(vector2():set(400,height))
	self.name:SetEllipsis		(true)
]]
	self.sect					= self:GetTextItem()
	self.sect:SetWndRect		(Frect():set(0,0,300,22))
	self:SetTextColor			(GetARGB(255, 216, 186, 140))
	self.sect:SetFont			(GetFontLetterica18Russian())
	self.sect:SetWndSize		(vector2():set(400,height))
	self.sect:SetEllipsis		(true)
end

------------------------------------------------------------
-- MAIN DEBUG UI
------------------------------------------------------------
class "debug_ui" (CUIScriptWnd)
function debug_ui:__init(owner,binds) super()
	self.owner = owner
	self.binds = binds
	self.txt_console = {}
	self.console_size = 27
	self:InitControls()
	self:InitCallBacks()
	self.tab:SetActiveTab("spawner")
	self:SendOutput("Alundaio's xrs_debug_tools version 2.1      [Type help for a list of commands]")
	self.console_relay = false
end

function debug_ui:__finalize()

end

function debug_ui:InitControls()
	self:SetWndRect				(Frect():set(0,0,1024,768))
	self:Enable					(true)

	local xml					= CScriptXmlInit()
	xml:ParseFile				("ui_debug_main.xml")

	xml:InitStatic				("background", self)
	self.dialog					= xml:InitStatic("main_dialog:dialog", self)

	-- Menu Quit
	local btn = xml:Init3tButton("main_dialog:btn_quit", self.dialog)
	self:Register(btn,"btn_quit")

	-- Teleport Button
	btn = xml:Init3tButton("main_dialog:btn_tp", self.dialog)
	self:Register(btn,"btn_tp")

	-- Console
	self.console = xml:InitStatic("console",self)
	self.console_input = xml:InitEditBox("console:input",self)
	self:Register(self.console_input,"console_input")

	local offset = vector2()
	offset.x = 10
	offset.y = 10

	for i=1,self.console_size do
		self.txt_console[i] = xml:InitTextWnd("console:ln",self.console)
		self.txt_console[i]:SetWndPos(offset)
		offset.y = offset.y + 15

		self.txt_console[i]:SetTextColor( GetARGB(255,240, 240, 240))
	end
	self.txt_console[1]:SetTextColor( GetARGB(255,255, 255, 255))

	-- Info
	self.form = xml:InitStatic("main_dialog:form",self.dialog)

	xml:InitStatic("main_dialog:cap_focus_id", self.dialog)
	self.txt_focus = xml:InitTextWnd("main_dialog:form:txt_focus", self.form)

	xml:InitStatic("main_dialog:cap_near_id", self.dialog)
	self.txt_near = xml:InitTextWnd("main_dialog:form:txt_near", self.form)

	-- Tab Spawner
	self.dlg_spawner = debug_spawner_ui(self,binds)
	self.dlg_spawner:InitControls(0,0, xml, self)
	self.dlg_spawner:Show(false)
	self.dialog:AttachChild(self.dlg_spawner)
	xml:InitWindow("tab_size", 0, self.dlg_spawner)

	-- Tab HUD options
	self.dlg_hud = debug_hud_ui(self,binds)
	self.dlg_hud:InitControls(0,0, xml, self)
	self.dlg_hud:Show(false)
	self.dialog:AttachChild(self.dlg_hud)
	xml:InitWindow("tab_size", 0, self.dlg_hud)

	-- Tab Object Info
	self.dlg_object = debug_object_ui(self,binds)
	self.dlg_object:InitControls(0,0, xml, self)
	self.dlg_object:Show(false)
	self.dialog:AttachChild(self.dlg_object)
	xml:InitWindow("tab_size", 0, self.dlg_object)

	-- Tab Advanced
	self.dlg_advanced = debug_advanced_ui(self,binds)
	self.dlg_advanced:InitControls(0,0, xml, self)
	self.dlg_advanced:Show(false)
	self.dialog:AttachChild(self.dlg_advanced)
	xml:InitWindow("tab_size", 0, self.dlg_advanced)

	-- Dialog Tab
	self.tab = xml:InitTab("main_dialog:tab", self.dialog)
	self:Register(self.tab, "tab")
end

function debug_ui:SetCurrentValues()

end

function debug_ui:Update()
	CUIScriptWnd.Update(self)

end

function debug_ui:InitCallBacks()
	self:AddCallback("tab", ui_events.TAB_CHANGED, self.OnTabChange, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.OnQuit, self)
	self:AddCallback("btn_tp", ui_events.BUTTON_CLICKED, self.OnBtnTeleport, self)
	self:AddCallback("btn_spawn", ui_events.BUTTON_CLICKED, self.OnBtnSpawn, self)
	self:AddCallback("btn_spawn_squad", ui_events.BUTTON_CLICKED, self.OnBtnSpawnSquad, self)
	self:AddCallback("btn_focus", ui_events.BUTTON_CLICKED, self.OnBtnFocus, self)
	self:AddCallback("btn_execute_string", ui_events.BUTTON_CLICKED, self.OnBtnExecuteString, self)
	--self:AddCallback("btn_switch_distance", ui_events.BUTTON_CLICKED, self.OnBtnSwitchDistance, self)
	self:AddCallback("btn_find", ui_events.BUTTON_CLICKED, self.OnBtnFindNearest, self)
	self:AddCallback("btn_set", ui_events.BUTTON_CLICKED, self.OnBtnSetLogic, self)
	self:AddCallback("btn_revert", ui_events.BUTTON_CLICKED, self.OnBtnRevertLogic, self)
	self:AddCallback("btn_reload", ui_events.BUTTON_CLICKED, self.OnBtnReloadIni, self)
	self:AddCallback("console_input", ui_events.EDIT_TEXT_COMMIT, self.OnConsoleInput, self)

	--- Spawner Tab
	self:AddCallback("list_sections", ui_events.LIST_ITEM_SELECT,		 self.OnSelectSectionList,		self)
	self:AddCallback("list_window",	  ui_events.WINDOW_LBUTTON_DB_CLICK, self.OnButton_create_clicked,	self)
    --self:AddCallback("btn_create",	  ui_events.BUTTON_CLICKED,          self.OnButton_create_clicked,	self)
end

function debug_ui:OnConsoleInput()
	local txt = self.console_input:GetText()
	if (txt == "") then
		return
	end

	local wrd = ""
	local _strt, _end = string.find(txt,".%S+")
	if (_strt and _end) then
		wrd = string.sub(txt,_strt, _end)
		wrd = string.lower(wrd)
	else
		return "For usage type echo help"
	end

	if not (debug_cmd_list.command_exists(wrd)) then
		self:SendOutput("Command %s cannot be found. Type help for a list of commands.",wrd)
		return
	end

	-- Grab rest of str
	local args = string.sub(txt,string.len(wrd)+1)

	-- Trim
	args = string.gsub(args, "^%s*(.-)%s*$", "%1")

	-- Perform execute string on $vars
	local p ={}
	local var_list = debug_cmd_list.get_var_list()
	for s in string.gmatch(args,"$(.-)%$") do
		s = string.gsub(s, "^%s*(.-)%s*$", "%1")
		if (s and s ~= "" and var_list[s]) then
			table.insert(p,s)
		else
			local ls,err = loadstring("return function() local val = " .. s .."; return val; end")
			local func = ls and ls() or err
			local val = func and type(func) == "function" and func()
			table.insert(p,val)
		end
	end

	-- replace all %s with returned vals
	local i = 0
	local function sr(a)
		i = i + 1

		if ( type(p[i] ~= "userdata") )then
			if ( var_list[p[i]] and type(var_list[p[i]] ~= "userdata") ) then
				return tostring(var_list[p[i]])
			end
			return tostring(p[i])
		end
		return ""
	end
	local output = string.gsub(args,"%%s",sr)

	-- Remove all $exe_strs
	output = string.gsub(output,"$(.-)%$","")

	-- Send Output
	self:SendOutput(debug_cmd_list.command_give(wrd,output,self,p))
end

function debug_ui:OnBtnTeleport()
	local pos = xrs_debug_tools.LastCameraPos
	if (pos) then
		db.actor:set_actor_position(pos)
		self:OnQuit()
	end
end

function debug_ui:OnBtnSpawn()
	local txt = self.fld_spawn:GetText()
	if (txt ~= "") then
		self:spawn_section(txt)
	end
end

function debug_ui:OnBtnSpawnSquad()
	local sec = self.fld_spawn_squad:GetText()
	local smrt = self.fld_spawn_smart:GetText()
	if (sec ~= "" and smrt ~= "") then
		self:spawn_squad(sec,smrt)
	end
end

function debug_ui:SendOutput(txt,...)
	if not (txt) or (txt == "") then
		return
	end

	local i = 0
	local out = txt
	local p = {...}
	if (#p > 0) then
		local function sr(a)
			i = i + 1
			return tostring(p[i])
		end
		out = string.gsub(txt,"%%s",sr)
	end

	for n=1,#self.txt_console-1,1 do
		local s = self.txt_console[n+1]:GetText()
		self.txt_console[n]:SetText(s)
	end
	self.txt_console[#self.txt_console]:SetText(out)

	if (self.console_relay) then
		alun_utils.printf("Debug Console: %s",out)
	end
end

function debug_ui:SendOutputList(list,start,finish)
	if not (list and not empty(list)) then
		return
	end

	local count = 1
	local i = 1
	local size = #self.txt_console
	for k,v in pairs(list) do
		if (start and count >= start) then
			if (i < (finish or size)) then
				self:SendOutput(tostring(v))
				i = i + 1
			else
				self:SendOutput(tostring(v))
				return
			end
		else
			count = count + 1
		end
	end
end

function debug_ui:OnBtnFocus()
	local txt = self.fld_focus:GetText()
	if (txt ~= "") then
		xrs_debug_tools.set_debug_npc(tonumber(txt))
		self.txt_focus:SetText(txt)
	else
		xrs_debug_tools.set_debug_npc()
		self.txt_focus:SetText("")
	end
end

function debug_ui:OnBtnExecuteString()
	local txt = self.fld_execute_string:GetText()
	if (txt ~= "") then
		--local loadstring = alun_plugin_manager.memoize(loadstring)
		assert(loadstring(txt))()
	end
end

function debug_ui:OnBtnSwitchDistance()
	local txt = self.fld_switch_distance:GetText()
	if (txt ~= "") then
		local a = alife()
		local old = a:switch_distance()
		local amt = tonumber(txt)
		--alun_utils.debug_write("%s %s ",old,amt)
		a:switch_distance(amt)
		self:SendOutput("Switch Distance changed from %s to %s.",old,amt)
	end
end

function debug_ui:OnBtnFindNearest()
	local txt = self.fld_find:GetText()
	self:FindNearest(txt)
end

function debug_ui:OnBtnSetLogic()
	local section = self.fld_section:GetText()
	if (section == "") then
		return
	end
	local id = self.fld_id:GetText()
	id = id and tonumber(id)
	local scheme = utils.get_scheme_by_section(section)
	local logic = self.fld_logic:GetText()
	local ini_filename = self.fld_filename:GetText()

	if (id and scheme and section and ini_filename) then
		local obj = db.storage[id] and db.storage[id].object or level.object_by_id(id)
		if (obj) then
			axr_logic.set_new_scheme_and_logic(obj,scheme,section,logic,nil,ini_filename)
			self:SendOutput("New scheme and logic set for %s.",obj:name())
		end
	end
end

function debug_ui:OnBtnRevertLogic()
	local id = self.fld_id:GetText()
	id = id and tonumber(id)
	if (id) then
		local obj = db.storage[id] and db.storage[id].object or level.object_by_id(id)
		if (obj) then
			axr_logic.restore_scheme_and_logic(obj)
			self:SendOutput("Reverted scheme and logic for %s.",obj:name())
		end
	end
end

function debug_ui:OnBtnReloadIni()
	local txt = self.fld_reload:GetText()
	if (txt and txt ~= "") then
		local st = db.storage[tonumber(txt)]
		if (st) then
			st.ini = nil
			st.ini = xr_logic.get_customdata_or_ini_file(st.object, st.ini_filename)
			xr_logic.switch_to_section(st.object,nil,nil)
			self:SendOutput("INI reload performed on %s.",obj:name())
		end
	end
end

function debug_ui:OnQuit()
	self:HideDialog()
	local console = get_console()
	console:execute("main_menu off")
end

function debug_ui:OnTabChange()
	self.dlg_spawner:Show	(false)
	self.dlg_hud:Show		(false)
	self.dlg_object:Show	(false)
	self.dlg_advanced:Show	(false)

	local ids = self.tab:GetActiveId()
	if ids == "spawner" then
		self.dlg_spawner:Show(true)
	elseif ids == "hud" then
		self.dlg_hud:Show(true)
	elseif ids == "object" then
		self.dlg_object:Show(true)
	elseif ids == "advanced" then
		self.dlg_advanced:Show(true)
	end
end

function debug_ui:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_RELEASED then
		local keybinds = self.binds or {}
		if dik == DIK_keys.DIK_ESCAPE then
			self:OnQuit()
		elseif (keybinds["debug_ui_nearest_stalker"] and dik == DIK_keys["DIK_"..keybinds["debug_ui_nearest_stalker"]]) then
			self:FindNearest("clsid.script_stalker")
		elseif (keybinds["debug_ui_spawn_position"] and dik == DIK_keys["DIK_"..keybinds["debug_ui_spawn_position"]]) then
			self.spawn_pos = db.actor:position()
			self.spawn_lvid = db.actor:level_vertex_id()
			self.spawn_gvid = db.actor:game_vertex_id()
			self:SendOutput("Set current spawning position to actor location. [To set to default type spawn reset]")
		end
	end
	return true
end

function debug_ui:spawn_section(text)
	if not system_ini():section_exist(text) then
		return false
	end

	local pos, lvid, gvid
	if (self.spawn_pos) then
		pos = self.spawn_pos
		lvid = self.spawn_lvid
		gvid = self.spawn_gvid
	else
		pos = db.actor:position()
		lvid = db.actor:level_vertex_id()
		gvid = db.actor:game_vertex_id()
	end

	local obj = alife():create(text,pos,lvid,gvid)
	--alun_utils.printf("Spawned Object %s as ID: %s",obj:name(),obj.id)
	self:SendOutput("Object %s created as ID %s.",obj:name(),obj.id)
	return true
end

function debug_ui:spawn_squad(section,smart)
	if not system_ini():section_exist(section) then
		self:SendOutput("UISpawner: Section %s does not exist in system INI.",section)
		return false
	end

	if not (smart) then
		self:SendOutput("UISpawner: Smart by name %s does not exist.",smart)
		return false
	end
	local sim = sim_board.get_sim_board()
	if not (sim.smarts_by_names[smart]) then
		self:SendOutput("UISpawner: Smart by name %s does not exist.",smart)
		return false
	end
	local squad = alun_utils.create_squad(section,smart)
	self:SendOutput("UISpawner: Squad %s created as ID %s at %s.",squad:name(),squad.id,smart)
	return true
end

function debug_ui:FindNearest(txt)
	if (txt and txt ~= "") then
		local near,dist
		if (txt == "clsid.script_stalker") then
			near,dist = alun_utils.nearest_object(clsid.script_stalker)
		else
			near,dist = alun_utils.nearest_object(txt)
		end


		if (near) then
			local id = near.id
			local st = db.storage[id]
			local scheme = st and st.active_scheme
			local section = st and st.active_section
			local logic = st and st.section_logic
			local ini_filename = st and st.ini_filename

			self.fld_id:SetText(id or "")
			self.fld_section:SetText(section or "")
			self.fld_logic:SetText(logic or "")
			self.fld_filename:SetText(ini_filename or "")
			self.fld_focus:SetText(id or "")
			self.fld_reload:SetText(id or "")
			self.txt_near:SetText(id)
			self:SendOutput("%s with ID %s found with distance %s",near:name(),id,dist)
		else
			--alun_utils.printf("Could not find object matching name")
			self.txt_near:SetText("Not Found")
			self:SendOutput("Object with name not found.")
		end
	end
end

local function get_spawn_table(name)
	if (name == "Artefacts") then
		return {
				"af_medusa", 		    -- 1
				"af_cristall_flower",   -- 2
				"af_night_star", 	    -- 3
				"af_vyvert", 		    -- 4
				"af_gravi", 		    -- 5
				"af_gold_fish", 	    -- 6
				"af_cristall", 		    -- 7
				"af_fireball", 	        -- 8
				"af_dummy_glassbeads",  -- 9
				"af_eye", 			    -- 10
				"af_fire", 			    -- 11
				"af_blood", 		    -- 12
				"af_mincer_meat", 	    -- 13
				"af_soul", 			    -- 14
				"af_fuzz_kolobok", 	    -- 15
				"af_baloon", 		    -- 16
				"af_glass", 		    -- 17
				"af_electra_sparkler",  -- 18
				"af_electra_flash",     -- 19
				"af_electra_moonlight", -- 20
				"af_dummy_battery", 	-- 21
				"af_dummy_dummy", 		-- 22
				"af_ice", 				-- 23
				"af_compass", 			-- 24
				"af_oasis_heart", 		-- 25
				"jup_b1_half_artifact", -- 26
				"af_quest_b14_twisted", -- 27
				}
	elseif (name == "Outfits") then
		return {
				"helm_respirator",
				"helm_hardhat",
				"helm_protective",
				"helm_tactic",
				"helm_battle",
				"helm_respirator_joker",
				"helm_hardhat_snag",
				"novice_outfit",
				"stalker_outfit",
				"svoboda_light_outfit",
				"dolg_outfit",
				"scientific_outfit",
				"cs_heavy_outfit",
				"svoboda_heavy_outfit",
				"specops_outfit",
				"military_outfit",
				"dolg_heavy_outfit",
				"exo_outfit",
				"stalker_outfit_barge",
				"god_outfit"
				}
	elseif (name == "Items (Misc.)") then
		return {
				"device_torch",
				"detector_simple",
				"detector_advanced",
				"detector_elite",
				"detector_scientific",
				"itm_actor_backpack",
				"itm_backpack",
				"itm_sleepbag",
				"itm_pda_common",
				"itm_pda_uncommon",
				"itm_pda_rare",
				"itm_gunsmith_toolkit"
				}
	elseif (name == "Items (Consumable)") then
		return {
				"bandage",
				"antirad",
				"medkit",
				"medkit_army",
				"medkit_scientic",

				"drug_booster",
				"drug_coagulant",
				"drug_psy_blockade",
				"drug_antidot",
				"drug_radioprotector",
				"drug_anabiotic",

				"bread",
				"kolbasa",
				"conserva",
				"vodka",
				"energy_drink"
				}
	elseif (name == "Weapons (Addon)") then
		return {
				"wpn_addon_scope",
				"wpn_addon_scope_x2.7",
				"wpn_addon_scope_detector",
				"wpn_addon_scope_night",
				"wpn_addon_scope_susat",
				"wpn_addon_scope_susat_x1.6",
				"wpn_addon_scope_susat_custom",
				"wpn_addon_scope_susat_dusk",
				"wpn_addon_scope_susat_night",
				"wpn_addon_silencer",
				"wpn_addon_grenade_launcher",
				"wpn_addon_grenade_launcher_m203"
				}
	elseif (name == "Weapons (Pistol)") then
		return  {
				"wpn_beretta",
				"wpn_desert_eagle",
				"wpn_desert_eagle_nimble",
				"wpn_pm",
				"wpn_pm_actor",
				"wpn_pb",
				"wpn_fort",
				"wpn_fort_snag",
				"wpn_hpsa",
				"wpn_walther",
				"wpn_sig220",
				"wpn_sig220_nimble",
				"wpn_colt1911",
				"wpn_usp",
				"wpn_usp_nimble"
				}
	elseif (name == "Weapons (Rifle)") then
		return {
				"wpn_bm16",
				"wpn_toz34",
				"wpn_wincheaster1300",
				"wpn_spas12",
				"wpn_spas12_nimble",
				"wpn_protecta",
				"wpn_protecta_nimble",
				"wpn_ak74u",
				"wpn_mp5",
				"wpn_ak74",
				"wpn_abakan",
				"wpn_l85",
				"wpn_lr300",
				"wpn_sig550",
				"wpn_groza",
				"wpn_val",
				"wpn_vintorez",
				"wpn_svu",
				"wpn_svd",
				"wpn_rg-6",
				"wpn_rpg7",
				"wpn_g36",
				"wpn_fn2000",
				"wpn_pkm",
				"wpn_gauss",
				"wpn_wincheaster1300_trapper",
				"wpn_ak74u_snag",
				"wpn_mp5_nimble",
				"wpn_sig550_luckygun",
				"wpn_groza_nimble",
				"wpn_vintorez_nimble",
				"wpn_svu_nimble",
				"wpn_svd_nimble",
				"wpn_g36_nimble",
				"wpn_fn2000_nimble",
				"wpn_pkm_zulus",
				"pri_a17_gauss_rifle"
			}
	elseif (name == "Weapons (Misc.)") then
		return	{
				"grenade_f1",
				"grenade_rgd5",
				"grenade_gd-05",
				"wpn_knife",
				"wpn_binoc",
				"wpn_mine",
				"explosive_barrel",
				"explosive_mobiltank",
				"explosive_dinamit"
				}
	elseif (name == "Items (Quest)") then
		return {
				"jup_a9_conservation_info",
				"jup_a9_power_info",
				"jup_a9_way_info",
				"jup_a9_evacuation_info",
				"jup_a9_meeting_info",
				"jup_a9_losses_info",
				"jup_a9_delivery_info",
				"jup_b10_ufo_memory",
				"jup_b10_ufo_memory_2",
				"jup_b10_notes_01",
				"jup_b10_notes_02",
				"jup_b10_notes_03",
				"jup_b205_sokolov_note",
				"jup_b206_plant",
				"jup_b209_monster_scanner",
				"jup_b200_tech_materials_wire",
				"jup_b200_tech_materials_acetone",
				"jup_b200_tech_materials_textolite",
				"jup_b200_tech_materials_transistor",
				"jup_b200_tech_materials_capacitor",
				"jup_b202_bandit_pda",
				"device_flash_snag",
				"jup_b9_blackbox",
				"jup_b32_scanner_device",
				"jup_b46_duty_founder_pda",
				"jup_b207_merc_pda_with_contract",
				"jup_b47_jupiter_products_info",
				"jup_b47_merc_pda",
				"toolkit_1",
				"toolkit_2",
				"toolkit_3",
				"zat_b33_safe_container",
				"zat_b57_gas",
				"zat_b12_key_1",
				"zat_b12_key_2",
				"zat_b12_documents_1",
				"zat_b12_documents_2",
				"device_pda_port_bandit_leader",
				"zat_b40_notebook",
				"zat_b40_pda_1",
				"zat_b40_pda_2",
				"device_pda_zat_b5_dealer",
				"zat_b20_noah_pda",
				"zat_a23_access_card",
				"zat_a23_gauss_rifle_docs",
				"zat_b44_barge_pda",
				"zat_b39_joker_pda",
				"zat_b22_medic_pda",
				"pri_b35_lab_x8_key",
				"pri_b306_envoy_pda",
				"pri_b36_monolith_hiding_place_pda",
				"pri_a25_explosive_charge_item",
				"pri_a19_american_experiment_info",
				"pri_a19_lab_x16_info",
				"pri_a19_lab_x10_info",
				"pri_a19_lab_x7_info",
				"pri_a19_lab_x18_info",
				"zat_a23_labx8_key",
				"lx8_service_instruction"
				}
	elseif (name == "Ammo") then
		return {
				"ammo_9x18_fmj",
				"ammo_9x18_pmm",
				"ammo_9x19_fmj",
				"ammo_9x19_pbp",
				"ammo_11.43x23_fmj",
				"ammo_11.43x23_hydro",
				"ammo_5.45x39_fmj",
				"ammo_5.45x39_ap",
				"ammo_5.56x45_ss190",
				"ammo_5.56x45_ap",
				"ammo_pkm_100",
				"ammo_7.62x54_7h1",
				"ammo_gauss",
				"ammo_gauss_cardan",
				"ammo_9x39_pab9",
				"ammo_9x39_ap",
				"ammo_12x70_buck",
				"ammo_12x76_zhekan",
				"ammo_og-7b",
				"ammo_vog-25",
				"ammo_m209"
				}
	elseif (name == "NPC (Stalker)") then
		return {
				"sim_default_stalker_0",
				"sim_default_stalker_1",
				"sim_default_stalker_2",
				"sim_default_stalker_3",
				"sim_default_stalker_4",
				"sim_default_bandit_0",
				"sim_default_bandit_1",
				"sim_default_bandit_2",
				"sim_default_bandit_3",
				"sim_default_bandit_4",
				"sim_default_killer_0",
				"sim_default_killer_1",
				"sim_default_killer_2",
				"sim_default_killer_3",
				"sim_default_killer_4",
				"sim_default_duty_0",
				"sim_default_duty_1",
				"sim_default_duty_2",
				"sim_default_duty_3",
				"sim_default_duty_4",
				"sim_default_freedom_0",
				"sim_default_freedom_1",
				"sim_default_freedom_2",
				"sim_default_freedom_3",
				"sim_default_freedom_4",
				"sim_default_army_0",
				"sim_default_army_1",
				"sim_default_army_2",
				"sim_default_army_3",
				"sim_default_army_4",
				"sim_default_monolith_0",
				"sim_default_monolith_1",
				"sim_default_monolith_2",
				"sim_default_monolith_3",
				"sim_default_monolith_4",
				"sim_monolith_sniper",
				"sim_monolith_specnaz_rg6",
				"sim_default_zombied_0",
				"sim_default_zombied_1",
				"sim_default_zombied_2",
				"sim_default_zombied_3",
				"sim_default_zombied_4",
				"sim_default_csky_0",
				"sim_default_csky_1",
				"sim_default_csky_2",
				"sim_default_csky_3",
				"sim_default_csky_4",
				"sim_default_ecolog_0",
				"sim_default_ecolog_1",
				"sim_default_ecolog_2",
				"sim_default_ecolog_3",
				"sim_default_ecolog_4",
				"sim_default_military_0",
				"sim_default_military_1",
				"sim_default_military_2",
				"sim_default_military_3",
				"sim_default_military_4"
				}
	elseif (name == "NPC (Mutant)") then
		return {
				"cat_weak",
				"cat_normal",
				"cat_strong",
				"dog_weak",
				"dog_normal",
				"dog_strong",
				"rat_weak",
				"rat_normal",
				"rat_strong",
				"chimera_weak",
				"chimera_normal",
				"chimera_strong",
				"controller_weak",
				"controller_normal",
				"controller_strong",
				"bloodsucker_weak",
				"bloodsucker_normal",
				"bloodsucker_strong",
				"boar_weak",
				"boar_normal",
				"boar_strong",
				"flesh_weak",
				"flesh_normal",
				"flesh_strong",
				"fracture_weak",
				"fracture_normal",
				"fracture_strong",
				"zombie_weak",
				"zombie_normal",
				"zombie_strong",
				"gigant_weak",
				"gigant_normal",
				"gigant_strong",
				"snork_weak",
				"snork_normal",
				"snork_strong",
				"pseudodog_weak",
				"pseudodog_normal",
				"pseudodog_strong",
				"burer_weak",
				"burer_normal",
				"burer_strong",
				"tushkano_weak",
				"tushkano_normal",
				"tushkano_strong"
				}
	elseif (name == "Squads (Stalker)") then
		return {
				"stalker_sim_squad_novice",
				"stalker_sim_squad_advanced",
				"stalker_sim_squad_veteran",
				"bandit_sim_squad_novice",
				"bandit_sim_squad_advanced",
				"bandit_sim_squad_veteran",
				"duty_sim_squad_novice",
				"duty_sim_squad_advanced",
				"duty_sim_squad_veteran",
				"freedom_sim_squad_novice",
				"freedom_sim_squad_advanced",
				"freedom_sim_squad_veteran",
				"army_sim_squad_novice",
				"army_sim_squad_advanced",
				"army_sim_squad_veteran",
				"merc_sim_squad_novice",
				"merc_sim_squad_advanced",
				"merc_sim_squad_veteran",
				"monolith_sim_squad_novice",
				"monolith_sim_squad_advanced",
				"monolith_sim_squad_veteran",
				"csky_sim_squad_novice",
				"csky_sim_squad_advanced",
				"csky_sim_squad_veteran",
				"ecolog_sim_squad_novice",
				"ecolog_sim_squad_advanced",
				"ecolog_sim_squad_veteran",
				"zombied_sim_squad_novice",
				"zombied_sim_squad_advanced",
				"zombied_sim_squad_veteran"
				}
	elseif (name == "Squads (Monster)") then
		return {
				"simulation_bloodsucker",
				"simulation_boar",
				"simulation_burer",
				"simulation_dog",
				"simulation_pseudodog",
				"simulation_flesh",
				"simulation_snork",
				"simulation_controller",
				"simulation_mix_dogs",
				"simulation_mix_boar_flesh",
				"simulation_poltergeist_tele",
				"simulation_chimera",
				"simulation_chimera_zaton",
				"simulation_chimera_pripyat",
				"simulation_chimera_jupiter",
				"simulation_psy_dog",
				"simulation_tushkano",
				"simulation_gigant",
				"simulation_cat",
				"simulation_zombie",
				"simulation_rat",
				"simulation_rats",
				"simulation_fracture"
				}
	elseif (name == "Physic (Misc.)") then
		return {
				"mine_blow",
				"jup_b209_ph_scanner",
				"jup_b207_depot_cover",
				"pri_a28_actor_hideout",
				"jup_b219_gate",
				"pri_a25_explosive_charge",
				"pri_a28_earth_helli_1",
				"pri_a28_earth_helli_2",
				"jup_b206_plant_ph",
				"shooting_target_1",
				"balon_01",
				"balon_02",
				"balon_02link",
				"balon_02a",
				"bidon",
				"bochka_close_1",
				"bochka_close_2",
				"bochka_close_3",
				"bochka_close_4",
				"gaz_balon",
				"disel_generator",
				"krisagenerator",
				"ventilator_01",
				"ventilator_02",
				"ventilator_03",
				"ventilator_04",
				"ventilator_05",
				"notebook",
				"priemnik_gorizont",
				"rupor",
				"transiver",
				"tv_1",
				"table_lamp_01",
				"komp_monitor",
				"komp_klava",
				"komp_block",
				"debris_01",
				"wood_fence_1",
				"wood_fence_2",
				"wood_fence_3",
				"wood_fence_4",
				"banka_kraski_1",
				"kanistra_01",
				"tiski",
				"kanistra_02",
				"vedro_01",
				"axe",
				"hammer",
				"hatch_01",
				"keyga",
				"lopata",
				"molot",
				"pick",
				"riffler",
				"saw",
				"box_1a",
				"box_1b",
				"box_1c",
				"box_bottle_1",
				"box_metall_01",
				"box_wood_01",
				"box_wood_02",
				"box_paper"
				}
	end
end

function debug_ui:FillList(name)
	if not (name) then
		self:SendOutput("UISpawner: No spawn table could be created for %s",name)
		return
	end

	self.spawn_list:Clear()

	local spawntbl = get_spawn_table(name)

	if not (spawntbl) then
		self:SendOutput("UISpawner: No spawn table could be created for %s",name)
		return
	end

	local ini = system_ini()

	table.sort(spawntbl)
	for i = 1, #spawntbl do
		if (ini:section_exist(spawntbl[i])) then
			local _itm = set_list_text(22)
			--local name = game.translate_string(system_ini():r_string(sections[i], "inv_name"))

			--_itm.name:SetText(name)
			_itm.sect:SetText(spawntbl[i])

			if (string.find(name,"Squad")) then
				_itm.no_id = true
				_itm.squad = true
			elseif (string.find(name,"NPC") or string.find(name,"Physic")) then
				_itm.no_id = true
			end

			self.spawn_list:AddExistingItem(_itm)
		end
	end
end

function debug_ui:OnSelectSectionList()
	self:FillList(self.sections_list:GetText())
end

function debug_ui:OnButton_create_clicked()
	if self.spawn_list:GetSize() == 0 then
		self:SendOutput("UISpawner: List is empty.")
		return
	end

	local item
	item = self.spawn_list:GetSelectedItem()
	if not(item) then
		self:SendOutput("UISpawner: No item section was selected in the list.")
		return
	end

	local section = item.sect:GetText()

	if (item.squad) then
		local smart = self.smarts_list:GetText()
		self:spawn_squad(section,smart)
		return
	end

	local pos, lvid, gvid
	if (self.spawn_pos) then
		pos = self.spawn_pos
		lvid = self.spawn_lvid
		gvid = self.spawn_gvid
	else
		pos = db.actor:position()
		lvid = db.actor:level_vertex_id()
		gvid = db.actor:game_vertex_id()
	end

	local id = not item.no_id and self.check_to_actor:GetCheck() and 0
	local se_obj
	if (id) then
		se_obj = alife():create(section, vector(), 0, 0, id)
	else
		se_obj = alife():create(section, pos, lvid, gvid)
	end

	if not (se_obj) then
		self:SendOutput("UISpawner: Failure to create item with alife create method %s",section)
		return
	end

	self:SendOutput("UISpawner: Spawned %s on %s as id %s",se_obj:name(),id == 0 and "Actor" or "level",se_obj.id)
end

-- SPAWNER UI
--[[
Copyright (C) 2012 Alundaio
This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License-]]
--]]
class "debug_spawner_ui" (CUIWindow)
function debug_spawner_ui:__init(owner, binds) super()
	self.owner = owner
	self.binds = binds
end
function debug_spawner_ui:__finalize()

end

function debug_spawner_ui:InitControls(x, y, xml, owner)
	self:SetWndPos(vector2():set(x-50,y))
	self:SetWndSize(vector2():set(800,416))
	self:SetAutoDelete(true)


	owner.sections_list = xml:InitComboBox("tab_spawner:list_sections", self)
	owner.sections_list:ClearList()
	owner.sections_list:SetAutoDelete(true)

	local slist = {"Weapons (Addon)","Items (Misc.)","Weapons (Rifle)","Weapons (Pistol)","Weapons (Misc.)","Outfits","Ammo","Artefacts","Items (Consumable)","Items (Quest)","NPC (Stalker)","Squads (Stalker)","NPC (Mutant)", "Physic (Misc.)","Squads (Monster)"}
	table.sort(slist)
	for i=1,#slist do
		owner.sections_list:AddItem(slist[i],i-1)
	end

	owner:Register(owner.sections_list, "list_sections")

	owner.spawn_list_frame = xml:InitFrame("tab_spawner:list_frame",self)
	owner.spawn_list = xml:InitListBox("tab_spawner:list",self)
	owner.spawn_list:ShowSelectedItem(true)

	owner:Register(owner.spawn_list, "list_window")

	owner.check_to_actor = xml:InitCheck("tab_spawner:check_own_to_actor",self)
	owner.check_to_actor:SetCheck(true)

	--local ctrl = xml:Init3tButton("tab_spawner:btn_create",self)
	--owner:Register(ctrl, "btn_create")

	owner.smarts_list = xml:InitComboBox("tab_spawner:list_smarts", self)
	owner.smarts_list:ClearList()
	owner.smarts_list:SetAutoDelete(true)

	local sim = alife()
	local actor_level = sim:level_name(game_graph():vertex(sim:actor().m_game_vertex_id):level_id())
	local board = sim_board.get_sim_board()
	local i = 0
	for id,t in pairs(board.smarts) do
		if (t.smrt and actor_level == t.smrt.smart_level) then
			owner.smarts_list:AddItem(t.smrt:name(),i)
			i = i + 1
		end
	end

	--owner:Register(owner.smarts_list, "list_smarts")

	-- Set defaults
	owner.sections_list:SetText("Weapons (Rifle)")
	owner:FillList("Weapons (Rifle)")

	owner.smarts_list:SetText("Squad to Smart")
end

-- HUD UI
--[[
Copyright (C) 2012 Alundaio
This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License-]]
--]]
class "debug_hud_ui" (CUIWindow)
function debug_hud_ui:__init(owner, binds) super()
	self.owner = owner
	self.binds = binds
end
function debug_hud_ui:__finalize()

end
function debug_hud_ui:InitControls(x, y, xml, owner)
	self:SetWndPos(vector2():set(x,y))
	self:SetWndSize(vector2():set(800,416))
	self:SetAutoDelete(true)

	xml:InitStatic("tab_hud:cap_focus", self)
	owner.fld_focus = xml:InitEditBox("tab_hud:fld_focus", self)

	local btn = xml:Init3tButton("tab_hud:btn_focus",self)
	owner:Register(btn, "btn_focus")
end

-- object UI
--[[
Copyright (C) 2012 Alundaio
This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License-]]
--]]
class "debug_object_ui" (CUIWindow)
function debug_object_ui:__init(owner, binds) super()
	self.owner = owner
	self.binds = binds
end
function debug_object_ui:__finalize()

end
function debug_object_ui:InitControls(x, y, xml, owner)
	self:SetWndPos(vector2():set(x,y))
	self:SetWndSize(vector2():set(800,416))
	self:SetAutoDelete(true)

	xml:InitStatic("tab_object:cap_find", self)
	owner.fld_find = xml:InitEditBox("tab_object:fld_find", self)

	local btn
	btn = xml:Init3tButton("tab_object:btn_find",self)
	owner:Register(btn, "btn_find")

	xml:InitStatic("tab_object:cap_id", self)
	owner.fld_id = xml:InitEditBox("tab_object:fld_id", self)

	xml:InitStatic("tab_object:cap_section", self)
	owner.fld_section = xml:InitEditBox("tab_object:fld_section", self)

	xml:InitStatic("tab_object:cap_logic", self)
	owner.fld_logic = xml:InitEditBox("tab_object:fld_logic", self)

	xml:InitStatic("tab_object:cap_filename", self)
	owner.fld_filename = xml:InitEditBox("tab_object:fld_filename", self)

	btn = xml:Init3tButton("tab_object:btn_set",self)
	owner:Register(btn, "btn_set")

	btn = xml:Init3tButton("tab_object:btn_revert",self)
	owner:Register(btn, "btn_revert")

	xml:InitStatic("tab_object:cap_reload", self)
	owner.fld_reload = xml:InitEditBox("tab_object:fld_reload", self)

	btn = xml:Init3tButton("tab_object:btn_reload",self)
	owner:Register(btn, "btn_reload")
end

-- ADVANCED UI
--[[
Copyright (C) 2012 Alundaio
This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License-]]
--]]
class "debug_advanced_ui" (CUIWindow)
function debug_advanced_ui:__init(owner, binds) super()
	self.owner = owner
	self.binds = binds
end
function debug_advanced_ui:__finalize()

end
function debug_advanced_ui:InitControls(x, y, xml, owner)
	self:SetWndPos(vector2():set(x,y))
	self:SetWndSize(vector2():set(800,416))
	self:SetAutoDelete(true)

	xml:InitStatic("tab_advanced:cap_execute_string", self)
	owner.fld_execute_string = xml:InitEditBox("tab_advanced:fld_execute_string", self)

	local btn = xml:Init3tButton("tab_advanced:btn_execute_string",self)
	owner:Register(btn, "btn_execute_string")

	xml:InitStatic("tab_advanced:cap_spawn", self)
	owner.fld_spawn = xml:InitEditBox("tab_advanced:fld_spawn", self)

	btn = xml:Init3tButton("tab_advanced:btn_spawn",self)
	owner:Register(btn, "btn_spawn")

	xml:InitStatic("tab_advanced:cap_spawn_squad", self)
	owner.fld_spawn_squad = xml:InitEditBox("tab_advanced:fld_spawn_squad", self)

	xml:InitStatic("tab_advanced:cap_spawn_smart", self)
	owner.fld_spawn_smart = xml:InitEditBox("tab_advanced:fld_spawn_smart", self)

	btn = xml:Init3tButton("tab_advanced:btn_spawn_squad",self)
	owner:Register(btn, "btn_spawn_squad")
end
