--[[-- INFO -------------------------------------------------------------------
	File				: avo_debug
	Description : Debug functions and callbacks for most game events
	Credits		 	: aVo
	Revision		: 1.2
	Change Date : 08.05.2014
--]]---------------------------------------------------------------------------

--[[-- TODO -------------------------------------------------------------------
	1. 
--]]---------------------------------------------------------------------------

--/----------------------------------------------------------------------------
--/ Variables & Constants
--/----------------------------------------------------------------------------
local SELF_NAME = script_name()
local is_initialized = false
--/----------------------------------------------------------------------------
--/ Initialization
--/----------------------------------------------------------------------------
function _init(CFG_FILE, module_name)
	if is_initialized then return true end -- already initialized, return true

	local ini = ini_file(CFG_FILE)
	
	local is_enabled = avo.read_ini(ini, "module", "enabled", "bool", false)
	if not is_enabled then
		wlog("-- %s module is disabled", module_name)
		return false
	end
	
	local use_xrs_debug = avo.read_ini(ini, "debug", "xrs_debug", "bool", false)
	if use_xrs_debug and xrs_debug_tools then
		slot("actor_net_spawn", this.on_actor_net_spawn)
		slot("actor_update", this.on_actor_update)
	end
	
	slot("actor_hit", this.on_actor_hit)
	slot("key_press", this.on_key_press)
	
	is_initialized = true -- mark as initialized
	ini = nil
	wlog("-- %s module is enabled", module_name)
	return true -- initialization successful
end


function on_actor_hit(obj, amount, local_direction, who, bone_index)
	-- if amount > 0.01 then dlog("actor is hit for %s", amount) end
end

function on_key_press(key)
	if key == DIK_keys.DIK_INSERT then
		sandbox("avo_sandbox", 'main()')
	end
end

function on_actor_net_spawn()
	xrs_debug_tools.on_game_load()
end

function on_actor_update()
	xrs_debug_tools.on_actor_update()
end

--/----------------------------------------------------------------------------
--/ Sandbox ( http://www.amk-team.ru/forum/index.php?showtopic=6458#entry258260 )
--/----------------------------------------------------------------------------
function sandbox(file_name, function_name, ...)
  local status, result = pcall(exec, file_name, function_name, ...)
  if status == false then
		elog("(%s:sandbox) call failed, result = [%s]", self_name, result)
		return
  else
    return result
  end
end

--/ execute script in sandbox
function exec(file_name, function_name, ...)
  if file_name then
		if not _G[file_name] then dlog("script %s is not found", file_name) return end -- script does not exist
		-- dlog("full script name = %s", getFS():update_path('$game_scripts$', '')..file_name..'.script')
    local result = assert(loadfile(getFS():update_path('$game_scripts$', '')..file_name..'.script'))
    if type(result) == "function" then
      if function_name then
        result()
        local f = loadstring("return "..function_name)
        f(...)
      else
        result()
      end
    else
			elog("(%s:sandbox) exec failed. function is not available: result = [%s]", self_name, type(result))
      return
    end
  else
    local file_path = getFS():update_path('$game_scripts', default_sandbox_file..'.script')
    local result = assert(loadfile(file_path))
    if type(result) == "function" then
      if function_name then
        result()
        local f = loadstring("return "..function_name)
        f(...)
      else
        result()
      end
    else
      elog("(%s:sandbox) exec failed. function is not available: result = [%s]", self_name, type(result))
      return
    end
  end
end


