----------------------------------------------------------------------------------------------------------------------
-- xr_corpse_detection
-- Alundaio (original: Stohe)
--[[
Copyright (C) 2012 Alundaio
This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License
--]]
----------------------------------------------------------------------------------------------------------------------

--------------------
local alife = alife
local level = level
local wp = world_property
--------------------

------------------------
-- INI
------------------------
local ini = ini_file("ai_tweaks\\xr_corpse_detection.ltx")
--local AlwaysDetectDistance = alun_utils.read_from_ini(ini,"settings","always_detect_dist","float",2500)
local DeathTimeDanger = alun_utils.read_from_ini(ini,"settings","death_time_danger","string","60000")
local AlwaysDetectDistanceFree = alun_utils.read_from_ini(ini,"settings","always_detect_dist_free","float",2500)
local AlwaysDetectDistanceDanger = alun_utils.read_from_ini(ini,"settings","always_detect_dist_danger","float",125)
local StateWalk	 = alun_utils.read_from_ini(ini,"settings","state_walk","string","walk_noweap")
local StateRun	 = alun_utils.read_from_ini(ini,"settings","state_run","string","rush")
local MonsterLoot = alun_utils.read_from_ini(ini,"settings","enable_mutant_looting","bool",false)
local MonsterLootCommunities = alun_utils.collect_section(ini,"loot_mutant_communities",true)
lootable_table = alun_utils.collect_section(ini,"lootable",true)
ini = nil

local HasValuableLoot = {}
function has_valuable_loot(obj)
	return HasValuableLoot[obj:id()] == true
end

function set_valuable_loot(id,val)
	HasValuableLoot[id] = val
end

------------------------------------------
-- Localized Functions
------------------------------------------

local function on_item_take(npc,item)
	if (npc:alive()) then
		return
	end
	if (item and lootable_table[item:section()] ~= nil) then
		HasValuableLoot[npc:id()] = true
		return
	end
end

local function on_item_drop(npc,item)
	if (not npc or npc:alive()) then
		return
	end
	local se_item = alife():object(item:id())
	if (se_item and se_item.parent_id == db.actor:id()) then
		local corpse_contain_any_valuable
		HasValuableLoot[npc:id()] = nil
		local function check_item(npc,item)
			if (lootable_table[item:section()] ~= nil) then
				corpse_contain_any_valuable = true
			end
		end

		npc:iterate_inventory(check_item,npc)

		if (corpse_contain_any_valuable) then
			HasValuableLoot[npc:id()] = true
		end
	end
end

local function on_death_callback(npc,who)
	local corpse_contain_any_valuable
	HasValuableLoot[npc:id()] = nil
	local function check_item(npc,item)
		if (lootable_table[item:section()] ~= nil) then
			corpse_contain_any_valuable = true
		end
	end

	npc:iterate_inventory(check_item,npc)

	if (corpse_contain_any_valuable) then
		HasValuableLoot[npc:id()] = true
	end
	
	alun_utils.save_var(npc,"death_by_id",who:id())
	if (who:id() == db.actor:id()) then
		local itm = db.actor:active_item()
		if (itm and itm:clsid() == clsid.wpn_knife_s) then
			alun_utils.save_var(npc,"death_by_knife",true)
		end
	end
	--alun_utils.save_var(npc,"death_by_id",who:id())
end

local function monster_on_death_callback(obj,who)
	if not (MonsterLoot) then
		return
	end
	HasValuableLoot[obj:id()] = true
end

local function monster_on_net_spawn(obj)
	if not (MonsterLoot) then
		return
	end

	if (obj:alive()) then
		return
	end
	
	-- avo: for mosters that are spawned dead?
	local se_obj = alife():object(obj:id())
	HasValuableLoot[obj:id()] = se_obj and not se_obj.looted
end

local function scheme_deactivate(npc,scheme,st)
	if (scheme ~= "corpse_detection") then
		return
	end

	if (st.selected_corpse_id) then
		if (db.storage[st.selected_corpse_id]) then
			db.storage[st.selected_corpse_id].corpse_already_selected = nil
		end
		st.selected_corpse_id = nil
	end
	st.vertex_id = nil
	st.vertex_position = nil
end

-----------------------------------
-- Register Callbacks
-----------------------------------
function on_game_start()
	callback_register("npc_on_item_take",on_item_take)
	callback_register("npc_on_item_drop",on_item_drop)
	callback_register("npc_on_death_callback",on_death_callback)
	callback_register("monster_on_death_callback",monster_on_death_callback)
	callback_register("monster_on_net_spawn",monster_on_net_spawn)
	callback_register("scheme_deactivate",scheme_deactivate)
end

function get_all_from_corpse(npc)
	state_mgr.set_state(npc,"idle",nil,nil,nil,{fast_set = true})

	local id = npc:id()
	local st = db.storage[id] and db.storage[id].corpse_detection

	-- sanity check, this should never happen
	if not (st) then
		return
	end
	st.dtimer = time_global()+500
	local corpse_npc_id = st.selected_corpse_id
	local corpse_npc = corpse_npc_id and db.storage[corpse_npc_id] and db.storage[corpse_npc_id].object or corpse_npc_id and level.object_by_id(corpse_npc_id)

	-- reset all scheme dependent variables
	if (st.selected_corpse_id) then
		if (db.storage[st.selected_corpse_id]) then
			db.storage[st.selected_corpse_id].corpse_already_selected = nil
		end
		HasValuableLoot[st.selected_corpse_id] = nil
	end
	st.vertex_id = nil
	st.vertex_position = nil
	st.selected_corpse_id = nil
	st.state = nil
	st.stage = 1
	st.index = 1
	st.nearest_corpse_dist = nil
	st.nearest_corpse_vertex = nil
	st.nearest_corpse_position = nil
	st.nearest_id = nil

	-- another sanity check, should never happen
	if (corpse_npc == nil or corpse_npc:alive() == true) then
		if not (corpse_npc) then
			alun_utils.printf("corpse is nil id=%s ",corpse_npc_id)
		else
			alun_utils.printf("corpse %s id=%s alive?",corpse_npc:name(),corpse_npc_id)
		end
		return
	end

	--alun_utils.printf("%s looting from %s",npc:name(),corpse_npc:name())

	if not(IsStalker(corpse_npc)) then
		local looted = alun_utils.load_var(corpse_npc,"looted",nil)
		if (not looted and itms_manager) then
			local loot = {}
			itms_manager.loot_mutant(nil,corpse_npc:clsid(),loot,npc)

			local is_there_loot
			for sec,t in pairs(loot) do
				is_there_loot = true
				break
			end

			if (is_there_loot) then
				xr_sound.set_sound_play(id,"corpse_loot_good")
			else
				xr_sound.set_sound_play(id,"corpse_loot_bad")
			end
			alun_utils.save_var(corpse_npc,"looted",true)
		end
		return
	end

	local items_value = 0
	local sec
	local function get_item(corpse,item)
		if (lootable_table[item:section()] ~= nil) then
			if (items_value < 100) then
				items_value = items_value+item:cost()*item:condition()/30
			end
			corpse:transfer_item(item,npc)
		end
	end

	corpse_npc:iterate_inventory(get_item,corpse_npc)

	if items_value >= 100 then
		xr_sound.set_sound_play(id,"corpse_loot_good")
	elseif items_value > 0 and math.random() < 0.5 then
		xr_sound.set_sound_play(id,"corpse_loot_bad")
	end

	if (axr_main) then
		axr_main.npc_on_get_all_from_corpse(npc,corpse_npc)
	end
end

----------------------------------------------------------------------------------------------------------------------
-- EVALUATORS
----------------------------------------------------------------------------------------------------------------------
class "evaluator_corpse" (property_evaluator)
function evaluator_corpse:__init(name, storage, npc) super (nil, name)
	self.a = storage
	self.a.stage = 1
	self.a.dtimer = 0
end

local function eval_stage_1(st,npc)
	local se_npc = alife():object(npc:id())
	local detect_dist
	local dt_threshold
	local inertion
	
	local tg = time_global()
	if st.dtimer > tg then
		return false
	end
	st.dtimer = tg+3500
	
	if not (se_npc) then
	--	alun_utils.printf("xr_corpse_detection: se_npc = nil! npc = %s",npc and npc:name())
		return false
	end

	if not (st.index) then
		st.index = 1
	end

	if not (st.memory) then
		st.memory = {}
	end

	local size = #st.memory
	if (size == 0) then
		local i = 0
		local obj
		for o in npc:memory_visible_objects() do
			obj = o and o:object()
			if (obj and obj:alive() ~= true) and (IsStalker(obj) or IsMonster(obj)) then
				i = i + 1
				table.insert(st.memory,obj:id())
			end
		end
		size = i
	end

	if (size == 0 or st.index > size) then
		if (st.nearest_id and HasValuableLoot[st.nearest_id] and db.storage[st.nearest_id] and db.storage[st.nearest_id].corpse_already_selected == nil) then
			if (st.selected_corpse_id and db.storage[st.selected_corpse_id]) then
				db.storage[st.selected_corpse_id].corpse_already_selected = nil
			end
			st.vertex_id = st.nearest_corpse_vertex
			st.vertex_position = st.nearest_corpse_position
			st.selected_corpse_id = st.nearest_id
			st.state = st.nearest_state
			st.stage = 2
			db.storage[st.selected_corpse_id].corpse_already_selected = npc:id()

			st.index = 1
			st.nearest_corpse_dist = nil
			st.nearest_corpse_vertex = nil
			st.nearest_corpse_position = nil
			st.nearest_id = nil
			return true
		end

		st.index = 1
		st.nearest_corpse_dist = nil
		st.nearest_corpse_vertex = nil
		st.nearest_corpse_position = nil
		st.nearest_id = nil
		clear_table(st.memory)
		return false
	end

	local id = st.memory[st.index]
	local corpse_npc = id  and (db.storage[id] and db.storage[id].object or level.object_by_id(id))

	if (corpse_npc and corpse_npc:alive() ~= true and HasValuableLoot[id] and db.storage[id] and db.storage[id].corpse_already_selected == nil) then
		local squad = se_npc.group_id ~= 65535 and alife():object(se_npc.group_id)
		local can_loot_mutants = squad and squad.player_id and MonsterLootCommunities[squad.player_id] or MonsterLootCommunities[character_community(npc)]

		if (IsStalker(corpse_npc) or can_loot_mutants) then
			local corpse_pos = corpse_npc:bone_position("bip01_spine")
			local dist = npc:position():distance_to_sqr(corpse_pos)
			
			dt_threshold = npc:relation(corpse_npc) == game_object.friend and tg - corpse_npc:death_time()
			inertion = xr_logic.pick_section_from_condlist(db.actor,npc,xr_logic.parse_condlist(npc,"settings","death_time_danger",DeathTimeDanger))
			detect_dist = alun_utils.load_var(corpse_npc,"death_by_knife") and 0 or dt_threshold and dt_threshold > tonumber(inertion) and AlwaysDetectDistanceDanger or AlwaysDetectDistanceFree


			if (dist <= detect_dist) and (st.nearest_corpse_dist == nil or dist <= st.nearest_corpse_dist) then
				local corpse_vertex = level.vertex_id(corpse_pos)
				if level.vertex_position(corpse_vertex):distance_to_sqr(corpse_pos) > 16 then
					corpse_vertex = corpse_npc:level_vertex_id()
				end
				if npc:accessible(corpse_vertex) and level.vertex_position(corpse_vertex):distance_to_sqr(corpse_pos) <= 15 then
					st.nearest_corpse_dist = dist
					st.nearest_corpse_vertex = corpse_vertex
					st.nearest_corpse_position = corpse_pos
					st.nearest_id = id
					st.nearest_state = dist < math.random(5,30) and StateWalk or StateRun
				end
			end
		end
	end

	st.index = st.index + 1

	return false
end

local function eval_stage_2(st,npc)
	local corpse = st.selected_corpse_id and (db.storage[st.selected_corpse_id] and db.storage[st.selected_corpse_id].object or level.object_by_id(st.selected_corpse_id))
	if corpse and HasValuableLoot[st.selected_corpse_id] then -- and (db.storage[st.selected_corpse_id].corpse_already_selected == nil or db.storage[st.selected_corpse_id].corpse_already_selected == npc:id()) then
		return true
	end

	if (st.selected_corpse_id) then
		if (db.storage[st.selected_corpse_id]) then
			db.storage[st.selected_corpse_id].corpse_already_selected = nil
		end
		st.selected_corpse_id = nil
	end
	st.vertex_id = nil
	st.vertex_position = nil
	st.stage = 1
	return false
end

local function eval_reset(st)
	if (st.selected_corpse_id and db.storage[st.selected_corpse_id]) then
		db.storage[st.selected_corpse_id].corpse_already_selected = nil
	end
	st.vertex_id = nil
	st.vertex_position = nil
	st.selected_corpse_id = nil
	st.state = nil
	st.stage = 1
	st.index = 1
	st.nearest_corpse_dist = nil
	st.nearest_corpse_vertex = nil
	st.nearest_corpse_position = nil
	st.nearest_id = nil
	return false
end

function evaluator_corpse:evaluate()
	if (xr_gather_items.is_under_gather_items(self.object) == true) then
		return eval_reset(self.a)
	end

	if (db.storage[self.object:id()].danger_flag == true) then
		return eval_reset(self.a)
	end

	if (xr_conditions.surge_started() == true) then
		return eval_reset(self.a)
	end

	local enabled = xr_logic.pick_section_from_condlist(db.actor, self.object, self.a.corpse_detection_enabled)
	if (enabled ~= "true") then
		return eval_reset(self.a)
	end

	local npc = self.object
	if (npc:alive() ~= true or xr_wounded.is_wounded(npc) or npc:best_enemy())then
		return eval_reset(self.a)
	end

	if not (self.mgr) then
		self.mgr = npc:motivation_action_manager()
	end

	if not self.mgr:initialized() then
		return false
	end

	local cid = self.mgr:current_action_id()
	if (cid == xr_actions_id.wounded_exist or cid == xr_actions_id.stohe_meet_base + 1 or cid == xr_gather_items.actid) then
		return eval_reset(self.a)
	end

	if (alun_utils.get_squad_commander_action(npc) == stalker_ids.action_combat_planner) then
		return eval_reset(self.a)
	end

	if (self.a.stage == 1) then
		return eval_stage_1(self.a,npc) or false
	elseif (self.a.stage == 2) then
		return eval_stage_2(self.a,npc) or false
	end

	return eval_reset(self.a)
end

----------------------------------------------------------------------------------------------------------------------
--Actions
----------------------------------------------------------------------------------------------------------------------
class "action_search_corpse" (action_base)
function action_search_corpse:__init (npc_name,action_name,storage) super (nil,action_name)
	self.a = storage
end
function action_search_corpse:initialize()
	action_base.initialize(self)
	local npc = self.object
	state_mgr.set_state(npc,self.a.state)
	npc:set_desired_position()
	npc:set_desired_direction()
	npc:set_path_type(game_object.level_path)
	self.a.vertex_id = utils.send_to_nearest_accessible_vertex(npc,self.a.vertex_id,"corpse_detection")
	db.storage[self.a.selected_corpse_id].corpse_already_selected = npc:id()
end

local function execute_search_corpse(npc,self)
	if (state_mgr.get_state(npc) == "search_corpse") then
		return
	end

	local tg = time_global()
	if (npc:level_vertex_id() == self.a.vertex_id) then
		if not self.sound then
			if math.random() < 0.60 then
				xr_sound.set_sound_play(npc:id(),"corpse_loot_begin")
			end
			self.sound = true
		end

		look_pos = corpse and corpse:bone_position("bip01_spine") or self.a.vertex_position

		state_mgr.set_state(npc,"search_corpse",nil,nil,{look_position = look_pos},{fast_set = true})
	else
		state_mgr.set_state(npc,self.a.state)
		self.a.vertex_id = utils.send_to_nearest_accessible_vertex(npc, self.a.vertex_id,"corpse_detection")
	end
end

function action_search_corpse:execute()
	action_base.execute(self)
	execute_search_corpse(self.object,self)
end

function action_search_corpse:finalize()
	state_mgr.set_state(self.object, "idle")
	local st = self.a
	if (st.selected_corpse_id and db.storage[st.selected_corpse_id]) then
		db.storage[st.selected_corpse_id].corpse_already_selected = nil
	end
	st.vertex_id = nil
	st.vertex_position = nil
	st.selected_corpse_id = nil
	st.state = nil
	st.stage = 1
	st.index = 1
	st.nearest_corpse_dist = nil
	st.nearest_corpse_vertex = nil
	st.nearest_corpse_position = nil
	st.nearest_id = nil
	action_base.finalize(self)
end

---------------------------------------------------------------------------------------------------------------------
-- BINDER
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, char_ini, scheme, section, st)
	local manager = npc:motivation_action_manager()

	if (character_community(npc) == "zombied" or npc:section() == "actor_visual_stalker") then
		manager:add_evaluator(xr_evaluators_id.corpse_exist,property_evaluator_const(false))
	else
		manager:add_evaluator (xr_evaluators_id.corpse_exist, evaluator_corpse("corpse_exist", st))
	end

	-- Actions
	local action = action_search_corpse (npc:name(),"action_search_corpse", st)
	action:add_precondition(wp(xr_evaluators_id.corpse_exist, true))
	action:add_precondition( wp(stalker_ids.property_alive,true) )
	action:add_precondition( wp(stalker_ids.property_enemy,	false) )
	action:add_precondition( wp(stalker_ids.property_danger,false) )
	action:add_precondition( wp(stalker_ids.property_anomaly,false) )

	--action:add_precondition( wp(xr_gather_items.evaid, false))
	--action:add_precondition( wp(stalker_ids.property_items, false) )
	action:add_precondition( wp(xr_evaluators_id.wounded_exist,false) )
	action:add_precondition( wp(xr_evaluators_id.stohe_meet_base + 1, false) )
	action:add_precondition( wp(xr_evaluators_id.sidor_wounded_base, false) )
	action:add_precondition( wp(xr_evaluators_id.abuse_base, false) )
	--action:add_precondition( wp(xr_evaluators_id.state_mgr + 1,false) )

	action:add_effect(wp(xr_evaluators_id.corpse_exist, false))
	manager:add_action(xr_actions_id.corpse_exist, action)

	local p = {
				xr_actions_id.state_mgr + 2,
				xr_actions_id.alife
	}
	for i=1,#p do
		action = manager:action(p[i])
		if (action) then
			action:add_precondition( wp(xr_evaluators_id.corpse_exist,false) )
		else
			alun_utils.printf("xr_corpse_detection: no action id p[%s]",i)
		end
	end

end

function set_corpse_detection(npc, ini, scheme, section)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
end


function reset_corpse_detection(npc, scheme, st, section)
	if (st.corpse_detection.selected_corpse_id) then
		if (db.storage[st.corpse_detection.selected_corpse_id]) then
			db.storage[st.corpse_detection.selected_corpse_id].corpse_already_selected = nil
		end
		st.corpse_detection.selected_corpse_id = nil
	end
	st.corpse_detection.vertex_id = nil
	st.corpse_detection.vertex_position = nil

	st.corpse_detection.corpse_detection_enabled = xr_logic.parse_condlist(npc, section, "corpse_detection_enabled",utils.cfg_get_string(st.ini, section, "corpse_detection_enabled", npc, false,"","true"))
end

function is_under_corpse_detection(npc)
	local mgr = npc:motivation_action_manager()

	if not mgr:initialized() then
		return false
	end

	local current_action_id = mgr:current_action_id()
	return  current_action_id == xr_actions_id.corpse_exist
end

function clear_table (t)
	while #t > 0 do
		table.remove (t, #t)
	end
end