--[[-- INFO -------------------------------------------------------------------
	File				: avo_profiler
	Description	: profile execution times and memory usage
	Credits			: aVo
	Revision		: 0.1
	Change Date	: 08.10.2013
--]] --------------------------------------------------------------------------

local time_before = nil
local time_after = nil
local mem_before = nil
local mem_after = nil
local timer = profile_timer() -- cache function

local function form_msg(name,obj, proc_time, proc_mem)
	-- local time = os.date("*t")
	local msg = string.format('[PROFILER] (%s) ', os.date('%X')) 
	if not name then name = '<unknown>' end
	if obj then
		local id = obj:name()
		msg = msg..string.format('%s:%s processed in %.3f sec', name, id, proc_time)
	else
		msg = msg..string.format('%s processed in %.3f sec', name, proc_time)
	end
	-- msg = msg..'\n          '..string.format('uses %d Kb of memory', proc_mem)
	return msg
end

function profile_before(name,obj)
	time_before = os.clock()
	-- timer:start()
	-- collectgarbage()
	-- collectgarbage()
	-- mem_before = collectgarbage('count') -- in Kb
end

function profile_after(name,obj)
	time_after = os.clock()
	-- timer:stop()
	-- collectgarbage()
	-- collectgarbage()
	-- mem_after = collectgarbage('count') -- in Kb
	
	-- local proc_time = timer:time()/1000000 -- sec --time_after - time_before
	local proc_time = time_after - time_before
	-- local proc_mem = mem_after - mem_before
	
	-- avo_log.log(form_msg(name,obj,proc_time,proc_mem))
	avo_log.log(form_msg(name,obj,proc_time))
end